// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//test database
model Test {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Boolean
}

model Patient {
  id                 Int                 @id @default(autoincrement())
  uuid               String              @default(uuid())
  dob                DateTime?
  gender             String?
  patientNames       PatientName[]
  patientIdentifiers PatientIdentifier[]
  visits             Visit[]
  encounters         Encounter[]
  voided             Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  programEnrollments ProgramEnrollment[]
}

model PatientName {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  uuid      String   @default(uuid())
  voided    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientIdentifier {
  id         Int      @id @default(autoincrement())
  identifier String
  patient    Patient  @relation(fields: [patientId], references: [id])
  patientId  Int
  uuid       String   @default(uuid())
  voided     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Program {
  id                 Int                 @id @default(autoincrement())
  name               String
  uuid               String              @default(uuid())
  voided             Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  visitTypes         VisitType[]
  programEnrollments ProgramEnrollment[]
}

model VisitType {
  id             Int             @id @default(autoincrement())
  name           String
  uuid           String          @default(uuid())
  program        Program         @relation(fields: [programId], references: [id])
  programId      Int
  voided         Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  encounterTypes EncounterType[]
  visits         Visit[]
}

model EncounterType {
  id          Int         @id @default(autoincrement())
  name        String
  uuid        String      @default(uuid())
  visitType   VisitType   @relation(fields: [visitTypeId], references: [id])
  visitTypeId Int
  voided      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  encounters  Encounter[]
}

model Location {
  id                 Int                 @id @default(autoincrement())
  name               String
  uuid               String              @default(uuid())
  voided             Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  visits             Visit[]
  encounters         Encounter[]
  programEnrollments ProgramEnrollment[]
}

model Visit {
  id          Int         @id @default(autoincrement())
  visitDate   DateTime
  visitEnd    DateTime?
  patient     Patient     @relation(fields: [patientId], references: [id])
  patientId   Int
  location    Location    @relation(fields: [locationId], references: [id])
  locationId  Int
  visitType   VisitType   @relation(fields: [visitTypeId], references: [id])
  visitTypeId Int
  uuid        String      @default(uuid())
  voided      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  encounters  Encounter[]
}

model Encounter {
  id              Int           @id @default(autoincrement())
  encounterDate   DateTime
  patient         Patient       @relation(fields: [patientId], references: [id])
  patientId       Int
  encounterType   EncounterType @relation(fields: [encounterTypeId], references: [id])
  encounterTypeId Int
  location        Location      @relation(fields: [locationId], references: [id])
  locationId      Int
  uuid            String        @default(uuid())
  voided          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  visit           Visit         @relation(fields: [visitId], references: [id])
  visitId         Int
  Answer          Answer[]
}

model ProgramEnrollment {
  id         Int       @id @default(autoincrement())
  program    Program   @relation(fields: [programId], references: [id])
  programId  Int
  patient    Patient   @relation(fields: [patientId], references: [id])
  patientId  Int
  location   Location  @relation(fields: [locationId], references: [id])
  locationId Int
  startDate  DateTime
  endDate    DateTime?
  uuid       String    @default(uuid())
  voided     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model User {
  id                Int      @id @default(autoincrement())
  userName          String
  passWord          String
  isActive          Boolean  @default(true)
  loginAttemptsLeft Int      @default(3)
  uuid              String   @default(uuid())
  voided            Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Question {
  id           Int        @id @default(autoincrement())
  question     String
  answerType   AnswerType @relation(fields: [answerTypeId], references: [id])
  answerTypeId Int
  uuid         String     @default(uuid())
  voided       Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  answers      Answer[]
}

model AnswerType {
  id        Int        @id @default(autoincrement())
  name      String
  uuid      String     @default(uuid())
  voided    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
}

model Answer {
  id            Int       @id @default(autoincrement())
  encounter     Encounter @relation(fields: [encounterId], references: [id])
  encounterId   Int
  question      Question  @relation(fields: [questionId], references: [id])
  questionId    Int
  valueText     String?
  valueNumber   Int?
  valueDateTime DateTime?
  uuid          String    @default(uuid())
  voided        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
